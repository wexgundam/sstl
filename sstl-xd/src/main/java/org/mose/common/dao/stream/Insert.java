package org.mose.common.dao.stream;

import org.mose.common.dao.IPaging;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;
import org.springframework.util.Assert;

/**
 * what:   插入流式处理器
 * <p>
 * 采用流式编程方法，向Insert对象注入参数，最后调用插入方法插入数据
 *
 * @Author: 靳磊
 * @Date: 2017/8/11:20
 */
public class Insert<Entity, Id> {
    /**
     * Spring JdbcTemplate
     */
    @Autowired
    protected JdbcTemplate jdbcTemplate;
    /**
     * Spring namedParameterJdbcTemplate
     */
    @Autowired
    protected NamedParameterJdbcTemplate namedParameterJdbcTemplate;
    /**
     * 分页处理器
     */
    @Autowired
    protected IPaging paging;
    /**
     * 插入语句
     */
    protected String sql;
    /**
     * 带插入到数据库的实体Entity
     */
    protected Entity entity;
    /**
     * 主键对应的列名称，用于获取数据库自动生成的主键值
     */
    protected String idColumnName;

    /**
     * what:   构造函数，传入的参数均不可修改
     *
     * @param jdbcTemplate
     * @param namedParameterJdbcTemplate
     */
    public Insert(JdbcTemplate jdbcTemplate, NamedParameterJdbcTemplate namedParameterJdbcTemplate) {
        this.jdbcTemplate = jdbcTemplate;
        this.namedParameterJdbcTemplate = namedParameterJdbcTemplate;
    }

    /**
     * what:   插入语句
     *
     * @param sql
     *
     * @return
     */
    public Insert<Entity, Id> sql(String sql) {
        this.sql = sql;
        return this;
    }

    /**
     * what:   带插入数据库的实体
     *
     * @param entity
     *
     * @return
     */
    public Insert<Entity, Id> entity(Entity entity) {
        this.entity = entity;
        return this;
    }

    /**
     * what:   主键对应的列名称，用于获取数据库自动生成的主键值
     *
     * @param idColumnName
     *
     * @return
     */
    public Insert<Entity, Id> idColumnName(String idColumnName) {
        this.idColumnName = idColumnName;
        return this;
    }

    /**
     * what:   插入一条记录
     *
     * @return 插入数据为true，否则为false
     */
    public boolean insertOne() {
        Assert.notNull(sql, "The sql of insertOne is null.");
        Assert.notNull(entity, "The entity of insertOne is null.");

        int resultCount = namedParameterJdbcTemplate.update(sql, new BeanPropertySqlParameterSource(entity));
        return resultCount == 1 ? true : false;
    }

    /**
     * what:   如果主键是由数据库自动生成的，数据插入后，获取并返回idColumnName对应的值
     *
     * @return idColumnName对应的值
     */
    public Number insertOneForAutoGeneratedId() {
        Assert.notNull(sql, "The sql of insertOneForAutoGeneratedId is null.");
        Assert.notNull(entity, "The entity of insertOneForAutoGeneratedId is null.");
        Assert.notNull(idColumnName, "The idColumnName of insertOneForAutoGeneratedId is null.");

        KeyHolder keyHolder = new GeneratedKeyHolder();
        int resultCount = namedParameterJdbcTemplate.update(sql, new BeanPropertySqlParameterSource(entity),
                keyHolder, new String[]{idColumnName});
        if (resultCount > 0) {
            return keyHolder.getKey();
        } else {
            return null;
        }
    }
}
